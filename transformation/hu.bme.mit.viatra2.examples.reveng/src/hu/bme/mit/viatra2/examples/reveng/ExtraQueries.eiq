package hu.bme.mit.viatra2.examples.reveng

import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/containers"
import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/expressions"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/modifiers"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/statements"
import "http://www.emftext.org/java/types"

/*
 * These queries are copied from the old VIATRA2 implementation. Is not used in the transformation, and might be buggy.
 */

//pattern referenceTarget_old(targetRef : IdentifierReference, sourceElement : Commentable, referencedTarget : ReferenceableElement) {	
//	IdentifierReference(targetRef); //below sourceElement
//	ElementReference.target(targetRef, referencedTarget);
//}

// /**
//  * Finds the container class method for a given reference
//  */
// pattern parentClassMethod(callingMethod : ClassMethod, identifierRef : IdentifierReference) {
// 	ClassMethod(callingMethod);
// 	find statementInMethod(st, callingMethod);
// 	ExpressionStatement.expression(st, identifierRef);
//// 	IdentifierReference(identifierRef); //below CallingClassMethod
// }
 
 /**
  * Finds the immediate parent switchcase constant for a reference
  */
// pattern parentSwitchCaseConstrant(caseConstant : EnumConstant, classMethod, identifierRef) {
// 	NormalSwitchCase(switchCase);
// 	find belowStatement(switchCase, st);
// 	find parentSwitchCase(switchCase, classMethod, identifierRef);
// 	
// 	Conditional.condition(switchCase, condition);
// 	IdentifierReference(condition);
// 	find referenceTargetInStatement(condition, caseConstant, st);
// }
 
 /**
  * Finds immediate parent switch case, checks for lowest parent
  */
//  pattern parentSwitchCase(switchCase : NormalSwitchCase, classMethod : ClassMethod, identifierRef : IdentifierReference) {
//  	ClassMethod.statements(classMethod, st);
//  	find belowStatement(st, ^switch);
//  	Switch(^switch); //below ClassMethod
//  	Switch.cases(^switch, switchCase);
//  	SwitchCase.statements(switchCase, caseSt);
//  	find referenceInSwitch(identifierRef, caseSt);
//  	
//  	neg find lowerSwitch(^switch, identifierRef);
//  }
//  
//  pattern lowerSwitch(switchSt : Switch, identifierRef : IdentifierReference) {
//  	Switch(lowerSwitch);// below Switch
//  	find belowStatement+(switchSt, lowerSwitch);
//  	find referenceInSwitch(identifierRef, lowerSwitch);
//  }
//  
//  pattern referenceInSwitch(identifierRef : IdentifierReference, switchSt : Statement) {
//  	find belowStatement+(switchSt, st);
//  	ExpressionStatement.expression(st, identifierRef);
//  }
  
  /** Finds the class of the exception used in the parent catch block */
//  pattern parentCatchBlockClass(catchBlockClass, classMethod : ClassMethod, identifierRef : IdentifierReference) {
//  	CatchBlock(catchBlock);
//  	IdentifierReference(identifierRef); //below catchBlock
//  	find parentCatchBlock(catchBlock, classMethod, identifierRef);
//  	
//  	CatchBlock.parameter(catchBlock, param);
//  	OrdinaryParameter(param);
//  	find referenceTargetOfParameter(param, catchBlockClass);
//  }
//  
//  pattern referenceTargetOfParameter(param : OrdinaryParameter, target) {
//  	TypedElement.typeReference(param, nsClassRef);
//  	find targetOfNamespaceClassifierReference(nsClassRef, target);
//  }
  
//  pattern parentCatchBlock(catchBlock : CatchBlock, classMethod : ClassMethod, identifierRef : IdentifierReference) {
//  	find statementInMethod(tryBlock, classMethod);
//  	TryBlock(tryBlock); //below classMethod
//  	TryBlock.catcheBlocks(tryBlock, catchBlock);
//  	CatchBlock.statements(catchBlock, catchStatement);
//  	find belowStatement+(catchStatement, exprSt);
//  	ExpressionStatement.expression(exprSt, identifierRef);
//  	IdentifierReference(identifierRef); //below catchBlock
//  	
//  	neg find lowerCatchBlock(catchBlock, identifierRef);
//  }
//  
//  pattern lowerCatchBlock(catchBlock : CatchBlock, identifierRef : IdentifierReference) {
//  	find belowStatement+(catchBlock, lowerCatchStatement);
//  	CatchBlock(lowerCatchBlock); //below catchBlock
//  	CatchBlock.statements(lowerCatchBlock, lowerCatchStatement);
//  	find belowStatement+(lowerCatchStatement, exprSt);
//  	ExpressionStatement.expression(exprSt, identifierRef);
//  	IdentifierReference(identifierRef); //below lowerCatchBlock
//  }
//  
//  pattern parentStatementContainer(statementContainer : StatementListContainer, expression : Expression) {
//  	ExpressionStatement(st);
//  	StatementListContainer.statements(statementContainer, st);
//  	ExpressionStatement.expression(st, expression);
//  }
  
//  pattern sendMethodParameterInContainer(sendMethodParameter, statementContainer : StatementListContainer) {
//  	find parentStatementContainer(statementContainer, sendMethodCall);
//  	
//  	find methodCall(sendMethodCall, sendMethod);
//  	find nameOfElement("send", sendMethod);
//  	
//  	find argumentOfMethodCall(argument, sendMethodCall);
//  	Reference.next(argument, enumRef);
//  	find referenceTarget(enumRef, argument, sendMethodParameter);
//  }
  
//  pattern argumentOfMethodCall(argument : Expression, methodCall : MethodCall) {
//  	Argumentable.arguments(methodCall, argument);
//  }