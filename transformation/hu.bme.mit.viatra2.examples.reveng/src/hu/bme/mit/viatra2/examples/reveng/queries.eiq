package hu.bme.mit.viatra2.examples.reveng

import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/containers"
import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/expressions"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/modifiers"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/statements"
import "http://www.emftext.org/java/types"

/**
 * Collects all methods of a selected class.
 */
pattern methodsOfClass(cl : Class, m : ClassMethod) {
	Class.members(cl, m);
}

/**
 * Helper pattern for replacing 'below' construct in
 * the specific cases of the case study.
 */
pattern belowStatement(container, child : Statement) {
	StatementContainer.statement(container, child);
} or {
	StatementListContainer.statements(container, child);
} or {
	Switch.cases(container, caseBlock);
	SwitchCase.statements(caseBlock, child);
} or {
	TryBlock.catcheBlocks(container, catchBlock);
	CatchBlock.statements(catchBlock, child);
} or {
	Condition.elseStatement(container, child);
}

/**
 * Collects all statements in a method. Follows nested statements, such as conditions.
 */
pattern statementInMethod(st : Statement, m : ClassMethod) {
	ClassMethod.statements(m, st);
} or {
	ClassMethod.statements(m, rootSt);
	find belowStatement+(rootSt, st);
}

/**
 * Matches classes that are subtypes of 'State'
 */
pattern classSubtypeOfState(cl : Class) {
	find supertypeOfClass(supertype, cl);
	find nameOfElement("State", supertype);
} or {
	find supertypeOfClass(supertype, cl);
	find classSubtypeOfState(supertype);
}

/**
 * Matches class of non-abstract subtypes of 'State'
 */
pattern notAbstractStateClass(cl : Class) {
	find classSubtypeOfState(cl);
	neg find abstractClass(cl);
}

/**
 * Finds the name attribute for an element
 */
pattern nameOfElement(name, element : NamedElement) {
	NamedElement.name(element, name);
}

/**
 * Finds supertypes of a class
 */
pattern supertypeOfClass(supertype, cl : Class) {
	Class.^extends(cl, nsClassRef);
	find targetOfNamespaceClassifierReference(nsClassRef, supertype);
}

/**
 * Navigate on the classifierReference and target relations to Target
 */
pattern targetOfNamespaceClassifierReference(nsClassRef : NamespaceClassifierReference, target ) {
	NamespaceClassifierReference.classifierReferences(nsClassRef, classRef);
	ClassifierReference.target(classRef, target);
	
}

/**
 * Matches abstract classes
 */
pattern abstractClass(cl : Class) {
	AnnotableAndModifiable.annotationsAndModifiers(cl, mod);
	Abstract(mod);
}

/**
 * Finds the class which is called using an activate() method
 */
pattern classCalledWithActivate(activateCallClass : Class, activatedClassRef : IdentifierReference, stateClass : Class) {
	find classSubtypeOfState(stateClass);
	
	find referenceTargetInClass(activatedClassRef, activateCallClass, stateClass);
	Reference.next(activatedClassRef, instanceCall);
	
	find methodCall(instanceCall, activatedCallClassInstance);
	find nameOfElement("Instance", activatedCallClassInstance);
	Reference.next(instanceCall, activateCall);
	
	find methodCall(activateCall, activateMethod);
	find nameOfElement("activate", activateMethod);
}

/**
 * Connects a reference to its target.
 */
pattern referenceTarget(targetRef : IdentifierReference, referencedTarget : ReferenceableElement) {
	ElementReference.target(targetRef, referencedTarget);
}

/**
 * Navigation between a reference and its container statement.
 */
pattern referenceTargetInStatement(targetRef : IdentifierReference, referencedTarget : ReferenceableElement, st : Statement) {
	ExpressionStatement(st);
	ExpressionStatement.expression(st, targetRef);
	find referenceTarget(targetRef, referencedTarget);
}

/**
 * Navigation between a reference and its container method.
 */
pattern referenceTargetInMethod(targetRef : IdentifierReference, referencedTarget : ReferenceableElement, m : ClassMethod) {
	find statementInMethod(st, m);
	find referenceTargetInStatement(targetRef, referencedTarget, st);
}

/**
 * Navigation between a reference and its container class.
 */
pattern referenceTargetInClass(targetRef : IdentifierReference, referencedTarget : ReferenceableElement, cl : Class) {
	find methodsOfClass(cl, m);
	find referenceTargetInMethod(targetRef, referencedTarget, m);
}

/**
 * Connects a Method with its Caller
 */
 pattern methodCall(caller : MethodCall, method : ClassMethod) {
 	ElementReference.target(caller, method);
 }